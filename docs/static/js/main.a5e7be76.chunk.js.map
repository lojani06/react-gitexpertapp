{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GrifGridItem.js","components/GitGrid.js","hooks/useFetchGifs.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GrifGridItem","className","src","alt","GitGrid","loading","state","setstate","useEffect","then","imgs","console","log","useFetchGifs","GitExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"mMAIe,SAASA,EAAT,GAAuC,IAAjBC,EAAgB,EAAhBA,cAAgB,EAEbC,mBAAS,IAFI,mBAE1CC,EAF0C,KAE9BC,EAF8B,KAkBjD,OAEI,sBAAMC,SAZS,SAACC,GAChBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAQ,IAC1BR,GAAc,SAAAS,GAAG,OAAGP,GAAH,mBAAiBO,OAClCN,EAAc,MAOlB,SACI,uBACAO,KAAK,OACLC,MAAOT,EACPU,SArBkB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,mCCLlBG,EAAO,uCAAC,WAAMC,GAAN,uBAAAC,EAAA,6DACXC,EADW,iDACoCC,UAAUH,GAD9C,+DAEEI,MAAMF,GAFR,cAEXG,EAFW,gBAGGA,EAAKC,OAHR,uBAGVC,EAHU,EAGVA,KAIDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QAXxB,kBAiBVM,GAjBU,4CAAD,sDCDPO,EAAe,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAEnC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAW,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECAZ,SAACA,GAAc,IAAD,EAGbd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAL2B,mBAGhCC,EAHgC,KAGzBC,EAHyB,KAmBvC,OAXAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAC,GACdC,QAAQC,IAAIF,GACZH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAGvB,CAACpB,IAGIqB,EDVwBO,CAAa5B,GAA/Ba,EATwB,EAS7BN,KAAYa,EATiB,EASjBA,QAQnB,OACI,qCACA,6BAAKpB,IACJoB,GAAS,yCACV,qBAAKJ,UAAU,YAAf,SAEYH,EAAOJ,KAAK,SAACC,GAAD,OAET,cAAC,EAAD,eAEIA,GADEA,EAAIC,aE3BpBkB,EAAe,WAAO,IAAD,EAEM3C,mBAAS,CAAC,cAFhB,mBAEvB4C,EAFuB,KAEX7C,EAFW,KAY9B,OACI,qCACI,8CACA,cAACD,EAAD,CAAaC,cAAeA,IAC5B,uBAGA,6BAEQ6C,EAAWrB,KAAK,SAAAT,GAAQ,OAEnB,cAAC,EAAD,CAEGA,SAAUA,GADLA,Y,MCrBjC+B,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.a5e7be76.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport default function AddCategory({setCategorias}) {\r\n\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n    const handleInputChange = (e)=>{\r\n        setInputValue(e.target.value)\r\n       \r\n    }\r\n\r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault()//evitar que la pagina cargue por default\r\n\r\n        if (inputValue.trim().length> 2) {\r\n            setCategorias(cat=>[inputValue,...cat])\r\n            setInputValue('')\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n     \r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={handleInputChange}\r\n            />\r\n        </form>\r\n       \r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n    setCategorias: PropTypes.func.isRequired\r\n}","\r\n\r\n\r\nexport const getGifs=async(category)=>{\r\n    const url =`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=MwiOIhu31oMf5KOEzX9FFmLltCkvsLua`;\r\n    const resp = await fetch(url)\r\n    const {data}= await resp.json()\r\n    \r\n    //extraer informacion especifica del api\r\n\r\n    const gifs = data.map(img =>{\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url:img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    // console.log(gifs)\r\n\r\n    return gifs\r\n}","import React from 'react'\r\n\r\nexport const GrifGridItem = ({id,title,url}) => {\r\n    // console.log(id,title,url)\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInLeft\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport {GrifGridItem} from '../components/GrifGridItem'\r\n\r\n\r\nexport const GitGrid =  ({category}) => {\r\n\r\n    // const [images, setImages] = useState([])\r\n\r\n    // useEffect(() => {\r\n    //    getGifs()\r\n    //    getGifs(category).then(setImages)//.then se utiliza cuando retorna una promesa async\r\n\r\n    // }, [category])\r\n    const {data:images,loading} = useFetchGifs(category)\r\n\r\n   \r\n\r\n\r\n\r\n  \r\n  \r\n    return (\r\n        <>\r\n        <h3>{category}</h3>\r\n        {loading&&<p>Cargando</p>}\r\n        <div className=\"card-grid\">  \r\n            {\r\n                    images.map( (img)=>\r\n                     (\r\n                       <GrifGridItem\r\n                        key={img.id}\r\n                       {...img}/>\r\n                    ))\r\n                }\r\n           \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","//custon hooks son los que hacen el trabajo pesado\r\n\r\nimport React,{useEffect, useState} from 'react'\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n\r\n   const [state, setstate] = useState({\r\n       data:[],\r\n       loading:true\r\n   })\r\n   \r\n   useEffect(()=>{\r\n       getGifs(category).then(imgs=>{\r\n                console.log(imgs)\r\n                setstate({\r\n                    data:imgs,\r\n                    loading:false}\r\n                )\r\n       })\r\n   },[category])\r\n\r\n  \r\n   return state\r\n}\r\n\r\n","import React,{useState} from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport { GitGrid } from './components/GitGrid'\r\n\r\nexport const GitExpertApp = () => {\r\n\r\n    const [categorias, setCategorias] = useState(['One Punch'])\r\n\r\n    // const handleAdd=()=>{\r\n    //     // setCategorias([...categorias,'nuevo elemento '])\r\n    //    setCategorias(cat=>[...categorias,\"nuevo\"])\r\n    // }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>GitExpertApp</h2>\r\n            <AddCategory setCategorias={setCategorias}/>\r\n            <hr/>\r\n             \r\n\r\n            <ol>\r\n                {\r\n                    categorias.map( category=>\r\n                         (\r\n                         <GitGrid\r\n                            key={category}\r\n                            category={category}\r\n                         />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GitExpertApp } from './GitExpertApp';\nimport  './index.css'\n\n\n\nReactDOM.render(\n\n    <GitExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}